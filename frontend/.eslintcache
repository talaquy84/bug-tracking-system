[{"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\index.js":"1","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reportWebVitals.js":"2","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\App.js":"3","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Header.js":"4","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Footer.js":"5","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Sidebar.js":"6","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\LoginScreen.js":"7","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Message.js":"8","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Loader.js":"9","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\FormContainer.js":"10","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\HomeScreen.js":"11","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\SearchBox.js":"12","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\store.js":"13","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reducers\\userReducers.js":"14","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\actions\\userActions.js":"15","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\constants\\userConstants.js":"16","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\RegisterScreen.js":"17","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\routing\\PrivateRoute.js":"18","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\utils\\setAuthToken.js":"19","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ProfileScreen.js":"20","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\CreateTicketScreen.js":"21","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reducers\\ticketReducers.js":"22","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\constants\\ticketConstants.js":"23","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\actions\\ticketActions.js":"24","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ProjectScreen.js":"25","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\TicketScreen.js":"26","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reducers\\projectReducers.js":"27","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\constants\\projectConstants.js":"28","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\actions\\projectActions.js":"29","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\CreateProjectScreen.js":"30","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ProjectDetailScreen.js":"31","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\UsersScreen.js":"32","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ManageUsersScreen.js":"33","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\TicketDetailScreen.js":"34","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\PieChart.js":"35","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\UserDetailScreen.js":"36","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\TicketAssignScreen.js":"37"},{"size":594,"mtime":1614809983831,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":499162500000,"results":"40","hashOfConfig":"39"},{"size":3480,"mtime":1620279177407,"results":"41","hashOfConfig":"39"},{"size":1748,"mtime":1620149064009,"results":"42","hashOfConfig":"39"},{"size":338,"mtime":1612593290539,"results":"43","hashOfConfig":"39"},{"size":2224,"mtime":1620347072729,"results":"44","hashOfConfig":"39"},{"size":3179,"mtime":1619993163057,"results":"45","hashOfConfig":"39"},{"size":275,"mtime":1612674841666,"results":"46","hashOfConfig":"39"},{"size":405,"mtime":1617396449990,"results":"47","hashOfConfig":"39"},{"size":348,"mtime":1612675219449,"results":"48","hashOfConfig":"39"},{"size":5403,"mtime":1620416402319,"results":"49","hashOfConfig":"39"},{"size":848,"mtime":1620091623545,"results":"50","hashOfConfig":"39"},{"size":1334,"mtime":1620010400344,"results":"51","hashOfConfig":"39"},{"size":5027,"mtime":1619918395062,"results":"52","hashOfConfig":"39"},{"size":6382,"mtime":1619918342540,"results":"53","hashOfConfig":"39"},{"size":1518,"mtime":1619917921911,"results":"54","hashOfConfig":"39"},{"size":3664,"mtime":1619405442894,"results":"55","hashOfConfig":"39"},{"size":718,"mtime":1615430505872,"results":"56","hashOfConfig":"39"},{"size":260,"mtime":1615832076597,"results":"57","hashOfConfig":"39"},{"size":5720,"mtime":1620064351129,"results":"58","hashOfConfig":"39"},{"size":5955,"mtime":1620003959168,"results":"59","hashOfConfig":"39"},{"size":4431,"mtime":1620010386971,"results":"60","hashOfConfig":"39"},{"size":1794,"mtime":1620004206844,"results":"61","hashOfConfig":"39"},{"size":6764,"mtime":1620006994450,"results":"62","hashOfConfig":"39"},{"size":3566,"mtime":1620344278092,"results":"63","hashOfConfig":"39"},{"size":4371,"mtime":1620060927810,"results":"64","hashOfConfig":"39"},{"size":2753,"mtime":1619151158839,"results":"65","hashOfConfig":"39"},{"size":1050,"mtime":1619147112183,"results":"66","hashOfConfig":"39"},{"size":4062,"mtime":1619150746762,"results":"67","hashOfConfig":"39"},{"size":2235,"mtime":1619302890972,"results":"68","hashOfConfig":"39"},{"size":2910,"mtime":1618267005658,"results":"69","hashOfConfig":"39"},{"size":2241,"mtime":1619757576602,"results":"70","hashOfConfig":"39"},{"size":3240,"mtime":1620347131241,"results":"71","hashOfConfig":"39"},{"size":5065,"mtime":1619479951053,"results":"72","hashOfConfig":"39"},{"size":1212,"mtime":1619900245751,"results":"73","hashOfConfig":"39"},{"size":4273,"mtime":1620148797380,"results":"74","hashOfConfig":"39"},{"size":4439,"mtime":1620060158100,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"2tyh6p",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"78"},"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\index.js",[],["166","167"],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reportWebVitals.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\App.js",["168"],"import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Sidebar from './components/Sidebar'\nimport LoginScreen from './screens/LoginScreen'\nimport RegisterScreen from './screens/RegisterScreen'\nimport HomeScreen from './screens/HomeScreen'\nimport ProfileScreen from './screens/ProfileScreen'\nimport ProjectScreen from './screens/ProjectScreen'\nimport ProjectDetailScreen from './screens/ProjectDetailScreen'\nimport CreateProjectScreen from './screens/CreateProjectScreen'\nimport TicketScreen from './screens/TicketScreen'\nimport CreateTicketScreen from './screens/CreateTicketScreen'\nimport UsersScreen from './screens/UsersScreen'\nimport UserDetailScreen from './screens/UserDetailScreen'\nimport TicketDetailScreen from './screens/TicketDetailScreen'\nimport TicketAssignScreen from './screens/TicketAssignScreen'\nimport ManageUsersScreen from './screens/ManageUsersScreen'\nimport PrivateRoute from './routing/PrivateRoute'\nimport { loadUser } from './actions/userActions'\nimport { listAllProject } from './actions/projectActions'\nimport { listAllTicket } from './actions/ticketActions'\nimport { listAllUser } from './actions/userActions'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Row, Col } from 'react-bootstrap'\nimport setAuthToken from './utils/setAuthToken'\nimport store from './store'\n\nif (localStorage.token) {\n  setAuthToken(localStorage.token)\n}\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    store.dispatch(loadUser())\n    store.dispatch(listAllProject())\n    store.dispatch(listAllTicket())\n    store.dispatch(listAllUser())\n  }, [])\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/' component={LoginScreen} />\n        <Route exact path='/register' component={RegisterScreen} />\n        <Route>\n          <Row>\n            {/* Side Bar */}\n            <Col xs={3} sm={3} md={2} lg={2} className='pr-0'>\n              <Sidebar />\n            </Col>\n            {/* Main screen */}\n            <Col xs={9} sm={9} md={10} lg={10} className='px-0'>\n              <Header />\n              <Switch>\n                <PrivateRoute exact path='/home' component={HomeScreen} />\n                <PrivateRoute exact path='/profile' component={ProfileScreen} />\n                <PrivateRoute exact path='/projects' component={ProjectScreen} />\n                <PrivateRoute exact path='/projects/new' component={CreateProjectScreen} />\n                <PrivateRoute exact path='/projects/:id/edit' component={ProjectDetailScreen} />\n                <PrivateRoute exact path='/tickets' component={TicketScreen} />\n                <PrivateRoute exact path='/tickets/:id/edit' component={TicketDetailScreen} />\n                <PrivateRoute exact path='/tickets/:id/assign' component={TicketAssignScreen} />\n                <PrivateRoute exact path='/tickets/new' component={CreateTicketScreen} />\n                <PrivateRoute exact path='/users' component={UsersScreen} />\n                <PrivateRoute exact path='/users/:id/edit' component={UserDetailScreen} />\n                <PrivateRoute exact path='/admin/users' component={ManageUsersScreen} />\n                <PrivateRoute path=\"*\" component={HomeScreen} />\n              </Switch>\n              <Footer />\n            </Col>\n          </Row>\n        </Route>\n      </Switch>\n    </Router >\n  )\n}\n\nexport default App;\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Header.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Footer.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Sidebar.js",["169","170","171"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadUser } from '../actions/userActions'\r\nimport Loader from '../components/Loader'\r\nimport './Sidebar.css'\r\n\r\nconst Sidebar = () => {\r\n\r\n  const auth = useSelector(state => state.auth)\r\n  const { loading: loadingUser, user } = auth\r\n\r\n  return (\r\n    <div style={{ background: '#027581', height: '100%', color: \"white\" }} className='border border-secondary border-5'>\r\n      <div >\r\n        <Link to='/home'>\r\n          <h3 className='brand sidebar-header'>\r\n            <span className='fas fa-bug'></span>\r\n            <span style={{ paddingLeft: '1rem' }}>Bug Tracking</span>\r\n          </h3>\r\n        </Link>\r\n      </div>\r\n      <div className='sidebar-menu'>\r\n        <ul>\r\n          <li>\r\n            <Link className='menu-link' to='/home'>\r\n              <span className='fas fa-home'></span>\r\n              <span> Home</span>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link className='menu-link' to='/profile'>\r\n              <span className='far fa-id-card'></span>\r\n              <span> Profile</span>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link className='menu-link' to='/projects'>\r\n              <span className='fas fa-tasks'></span>\r\n              <span> Projects</span>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link className='menu-link' to='/tickets'>\r\n              <span className='fas fa-ticket-alt'></span>\r\n              <span> Tickets</span>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link className='menu-link' to='/users'>\r\n              <span className='fas fa-users'></span>\r\n              <span> View Users</span>\r\n            </Link>\r\n          </li>\r\n\r\n          <li>\r\n            {loadingUser ? (<Loader />) : user.isAdmin ? (\r\n              <Link className='menu-link' to='/admin/users'>\r\n                <span className='fas fa-users-cog'></span>\r\n                <span> Manage Users</span>\r\n              </Link>\r\n            ) : (<> </>)}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\LoginScreen.js",["172"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './LoginScreen.css'\r\nimport { Container, Jumbotron, Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { login } from '../actions/userActions'\r\n\r\nconst LoginScreen = ({ location, history }) => {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector(state => state.userLogin)\r\n  const { loading, user, error } = userLogin\r\n\r\n  const auth = useSelector(state => state.auth)\r\n  const { user: userAuth } = auth\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/home'\r\n\r\n  useEffect(() => {\r\n    if (user || userAuth) {\r\n      history.push('/home')\r\n    }\r\n  }, [history, user, userAuth, redirect])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(login({ email, password }))\r\n  }\r\n\r\n  return (\r\n    <div className='login-page bg-info'>\r\n      <Jumbotron className='form-box'>\r\n        <Container>\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col>\r\n              <h2 className=\"text-info text-center\">Sign In</h2>\r\n              <hr />\r\n              {/* error && ( if error then) */}\r\n              {error && <Message variant='danger'>{error}</Message>}\r\n              {loading && <Loader />}\r\n              <Form onSubmit={submitHandler} >\r\n                <Form.Group controlId='email'>\r\n                  <Form.Label>Email Address</Form.Label>\r\n                  <Form.Control\r\n                    className='border'\r\n                    type='email'\r\n                    placeholder='Enter email'\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                  <Form.Label >Password</Form.Label>\r\n                  <Form.Control\r\n                    className='border'\r\n                    type='password'\r\n                    placeholder='Enter password'\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                  ></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button className='btn-block' type='submit' variant='primary' fluid>\r\n                  Sign In\r\n                </Button>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col>\r\n              New Customer?\r\n            <Link to='/register'> Register</Link>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col>\r\n              Forget your\r\n            <Link to=''> Password?</Link>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Jumbotron>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default LoginScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Message.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\Loader.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\FormContainer.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\HomeScreen.js",["173","174","175","176","177","178","179"],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\SearchBox.js",["180"],"import React, { useState } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nconst SearchBox = ({ history }) => {\r\n  const [keyword, setKeyword] = useState('')\r\n\r\n  const submitHandler = (e) => {\r\n    // e.preventDefault()\r\n    // if (keyword.trim()) {\r\n    //   history.push(`/search/${ keyword }`)\r\n    // } else {\r\n    //   history.push('/')\r\n    // }\r\n    //SEARCH\r\n  }\r\n  return (\r\n    <Form onSubmit={submitHandler} inline>\r\n      <Form.Control\r\n        type='text'\r\n        name='q'\r\n        onChange={(e) => setKeyword(e.target.value)}\r\n        placeholder='Search Tickets...'\r\n        className='mr-sm-2 ml-sm-5 bg-white border border-secondary'\r\n\r\n      ></Form.Control>\r\n      <Button type='submit' variant='outline-success' className='p-2'>\r\n        Search\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default SearchBox","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\store.js",["181"],"import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { auth, userRegister, userLogin, userUpdateProfile, getAllUser, getUserById, userUpdateProfileById, userDelete } from './reducers/userReducers'\r\nimport { getAllProject, createNewProject, getProjectById, projectUpdate, projectDelete } from './reducers/projectReducers'\r\nimport { getAllTicket, getMyTickets, createNewTicket, ticketDelete, ticketUpdate, ticketById, ticketAssign, ticketRemoveUser } from './reducers/ticketReducers'\r\n\r\nconst reducer = combineReducers({\r\n  auth,\r\n  userRegister,\r\n  userLogin,\r\n  userUpdateProfile,\r\n  getAllUser,\r\n  getUserById,\r\n  getAllTicket,\r\n  getMyTickets,\r\n  userUpdateProfileById,\r\n  userDelete,\r\n  ticketById,\r\n  createNewTicket,\r\n  ticketDelete,\r\n  ticketUpdate,\r\n  ticketAssign,\r\n  ticketRemoveUser,\r\n  getAllProject,\r\n  createNewProject,\r\n  getProjectById,\r\n  projectUpdate,\r\n  projectDelete\r\n})\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n  ? JSON.parse(localStorage.getItem('userInfo'))\r\n  : null\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reducers\\userReducers.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\actions\\userActions.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\constants\\userConstants.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\RegisterScreen.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\routing\\PrivateRoute.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\utils\\setAuthToken.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ProfileScreen.js",["182"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport { updateUserProfile, loadUser } from '../actions/userActions'\r\nimport { listMyTickets } from '../actions/ticketActions'\r\nimport { hidden } from 'colors'\r\n\r\nconst ProfileScreen = ({ history }) => {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmedPassword, setConfirmedPassword] = useState('')\r\n  const [role, setRole] = useState('Developer')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const auth = useSelector(state => state.auth)\r\n  const { loading, user } = auth\r\n\r\n  const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const getMyTickets = useSelector(state => state.getMyTickets)\r\n  const { loading: loadingTicket, tickets, error } = getMyTickets\r\n\r\n  useEffect(() => {\r\n    dispatch(listMyTickets())\r\n    if (!user || !user.name || success) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      dispatch(loadUser())\r\n    } else {\r\n      setName(user.name)\r\n      setEmail(user.email)\r\n      setRole((user.role))\r\n    }\r\n  }, [dispatch, user, success])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    if (password !== confirmedPassword) {\r\n      setMessage('Password do not match')\r\n    } else {\r\n      dispatch(updateUserProfile({ id: user._id, name, email, password, role }))\r\n      setPassword('')\r\n      setConfirmedPassword('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <Row className='px-5 py-4'>\r\n        <Col md={3} >\r\n          <h2>User Profile</h2>\r\n          {message && <Message variant='danger'>{message}</Message>}\r\n          {success && <Message variant='success'>Update Successful</Message>}\r\n          {loading && <Loader />}\r\n          <Form>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Your Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter your name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"confirmedPassword\">\r\n              <Form.Label>Confirmed Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Confirmed Password\"\r\n                value={confirmedPassword}\r\n                onChange={(e) => setConfirmedPassword(e.target.value)}\r\n              />\r\n\r\n              <Form.Group controlId=\"role\">\r\n                <Form.Label>Role</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={role}\r\n                  onChange={(e) => setRole(e.target.value)}\r\n                >\r\n                  <option>Developer</option>\r\n                  <option>Tester</option>\r\n                  <option>Product Manager</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\" onClick={submitHandler}>\r\n              Update\r\n        </Button>\r\n          </Form>\r\n        </Col>\r\n        <Col md={9}>\r\n          <h2>My Ticket(s)</h2>\r\n          {loadingTicket ? <Loader /> : error ? <Message variant='danger'>\r\n            {error} </Message> : (\r\n            <Table striped bordered hover responsive className='table-sm'>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>NAME</th>\r\n                  <th>DESCRIPTION</th>\r\n                  <th>PRIORITY</th>\r\n                  <th>STATUS</th>\r\n                  <th>PROJECT</th>\r\n                  <th>DATE</th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tickets.map(ticket => (\r\n                  <tr key={ticket._id}>\r\n                    <td>{ticket._id}</td>\r\n                    <td>{ticket.name}</td>\r\n                    <td>{ticket.description}</td>\r\n                    <td>{ticket.priority}</td>\r\n                    <td>{ticket.status}</td>\r\n                    <td> {ticket.project.name}</td>\r\n                    <td>{ticket.createdAt.substring(0, 10)}</td>\r\n                    <td>\r\n                      <LinkContainer to={`/tickets/${ ticket._id }/edit`}>\r\n                        <Button className='btn-sm' variant='light'>Details</Button>\r\n                      </LinkContainer>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n        </ Col>\r\n      </Row>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\CreateTicketScreen.js",["183","184","185","186"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col, Container } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createTicket } from '../actions/ticketActions'\r\nimport { listAllProject } from '../actions/projectActions'\r\nimport { listAllUser } from '../actions/userActions'\r\nimport { TICKET_CREATE_RESET } from '../constants/ticketConstants'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\n\r\nconst CreateTicketScreen = ({ history }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const getAllUser = useSelector(state => state.getAllUser)\r\n  const { loading: loadingUser, error: errorUser, users } = getAllUser\r\n\r\n  const getAllProject = useSelector(state => state.getAllProject)\r\n  const { loading: loadingProject, error: errorProject, projects } = getAllProject\r\n\r\n  const [name, setName] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [priority, setPriority] = useState('Low')\r\n  const [status, setStatus] = useState('Pending')\r\n  const [assignedTo, setAssignedTo] = useState({ name: '', email: '', role: '', userId: '' })\r\n  const [project, setProject] = useState({ name: '', projectId: '' })\r\n\r\n  const createNewTicket = useSelector(state => state.createNewTicket)\r\n  const { loading, error, success } = createNewTicket\r\n\r\n  //Find the way to set initial asysnc\r\n  useEffect(() => {\r\n\r\n    if (success) {\r\n      dispatch({ type: TICKET_CREATE_RESET })\r\n      history.push(`/tickets`)\r\n    }\r\n  }, [dispatch, history, success])\r\n\r\n  const createTicketHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createTicket(\r\n      name, description, priority, status, assignedTo, project))\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <Container className='py-3 px-0 ml-auto'>\r\n        <Row className='px-5 py-4'>\r\n          <Col md={6} >\r\n            <h2>Create New Ticket</h2>\r\n            {success && <Message variant='success'>Project is Created</Message>}\r\n            {errorProject && <Message variant='danger'>{errorProject}</Message>}\r\n            {errorUser && <Message variant='danger'>{errorUser}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loadingProject || loadingUser || loading && <Loader />}\r\n            <Form >\r\n              <Form.Group controlId=\"name\">\r\n                <Form.Label>Ticket Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter project Name\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"description\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Description of the Project\"\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"priority\">\r\n                <Form.Label>Priority</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={priority}\r\n                  onChange={(e) => setPriority(e.target.value)}\r\n                >\r\n                  <option>Low</option>\r\n                  <option>Medium</option>\r\n                  <option>High</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"status\">\r\n                <Form.Label>Status</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={status}\r\n                  onChange={(e) => setStatus(e.target.value)}\r\n                >\r\n                  <option>Pending</option>\r\n                  <option>Reviewed</option>\r\n                  <option>Completed</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"assignedTo\">\r\n                <Form.Label>Assigned To</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={assignedTo.name}\r\n                  onChange={(e) => setAssignedTo({\r\n                    name: users[e.target.options.selectedIndex - 1].name,\r\n                    email: users[e.target.options.selectedIndex - 1].email,\r\n                    role: users[e.target.options.selectedIndex - 1].role,\r\n                    userId: users[e.target.options.selectedIndex - 1]._id,\r\n                  })}\r\n                >\r\n                  <option></option>\r\n                  {loadingUser ? <Loader /> : (users.map((user, index) => {\r\n                    return (\r\n                      <option key={index}>{user.name}</option>\r\n                    )\r\n                  })\r\n                  )}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"project\">\r\n                <Form.Label>Project</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={project.name}\r\n                  onChange={(e) => setProject({\r\n                    name: projects[e.target.options.selectedIndex - 1].name,\r\n                    projectId: projects[e.target.options.selectedIndex - 1]._id\r\n                  })}\r\n                >\r\n                  <option></option>\r\n                  {loadingProject ? <Loader /> : (projects.map((project, index) => (\r\n                    <option key={index}>{project.name}</option>\r\n                  ))\r\n                  )}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Button variant=\"primary\" type=\"submit\" onClick={createTicketHandler}>\r\n                Create\r\n            </Button>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default CreateTicketScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reducers\\ticketReducers.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\constants\\ticketConstants.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\actions\\ticketActions.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ProjectScreen.js",["187"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Container, Row, Col, Table, Button } from 'react-bootstrap'\r\nimport { LinkContainer, Link } from 'react-router-bootstrap'\r\nimport { listAllProject, deleteProject } from '../actions/projectActions'\r\nimport { listAllTicket } from '../actions/ticketActions'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\n\r\nconst ProjectScreen = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const getAllProject = useSelector(state => state.getAllProject)\r\n  const { loading, error, projects } = getAllProject\r\n\r\n  const projectDelete = useSelector(state => state.projectDelete)\r\n  const { success } = projectDelete\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(listAllProject())\r\n    dispatch(listAllTicket())\r\n\r\n    if (success) {\r\n      dispatch(listAllProject())\r\n    }\r\n  }, [dispatch, success])\r\n\r\n  const deleteHandler = (projectId, tickets) => {\r\n    if (window.confirm('Are you sure?')) {\r\n      dispatch(deleteProject(projectId, tickets))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <Container className='py-3 px-0 ml-auto'>\r\n        <Row>\r\n          <Col>\r\n            <h2>Projects</h2>\r\n            <LinkContainer to={`/projects/new`}>\r\n              <Button className='ml-auto mr-5' >Create New Projects</Button>\r\n            </LinkContainer>\r\n            {loading ? <Loader /> : error ? <Message variant='danger'>\r\n              {error} </Message> : (\r\n              <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>NAME</th>\r\n                    <th>DESCRIPTION</th>\r\n                    <th>TICKETS</th>\r\n                    <th>DATE</th>\r\n                    <th>EDIT</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {projects.map(project => (\r\n                    <tr key={project._id}>\r\n                      <td>{project._id}</td>\r\n                      <td>{project.name}</td>\r\n                      <td>{project.description}</td>\r\n                      <td>\r\n                        <ul>\r\n                          {project.ticket.map(ticket => (\r\n                            <LinkContainer to={`/tickets/${ ticket.ticketId }/edit`} >\r\n                              <li key={ticket.ticketId}>{ticket.ticketName}</li>\r\n                            </LinkContainer>\r\n                          ))}\r\n                        </ul>\r\n                      </td>\r\n                      <td>{project.createdAt.substring(0, 10)}</td>\r\n                      <td>\r\n                        <LinkContainer to={`/projects/${ project._id }/edit`}>\r\n                          <Button variant='light' className='btn-sm'>\r\n                            <i className='fas fa-edit'></i>\r\n                          </Button>\r\n                        </LinkContainer>\r\n                        <Button\r\n                          variant='danger'\r\n                          className='btn-sm'\r\n                          onClick={() => deleteHandler(project._id, project.ticket)\r\n                          }>\r\n                          <i className='fas fa-trash'></i>\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                  )}\r\n                </tbody>\r\n              </Table>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default ProjectScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\TicketScreen.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\reducers\\projectReducers.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\constants\\projectConstants.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\actions\\projectActions.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\CreateProjectScreen.js",["188"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { createProject } from '../actions/projectActions'\r\nimport { PROJECT_CREATE_RESET } from '../constants/projectConstants'\r\n\r\nconst CreateProjectScreen = ({ history }) => {\r\n  const [name, setName] = useState('')\r\n  const [description, setDescription] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const newProject = useSelector(state => state.createNewProject)\r\n  const { loading, success, error, project } = newProject\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PROJECT_CREATE_RESET })\r\n\r\n    if (success) {\r\n      history.push(`/projects`)\r\n    }\r\n  }, [dispatch, history, success])\r\n\r\n  const createProjectHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(createProject(name, description))\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <Row className='px-5 py-4'>\r\n        <Col >\r\n          <h2>Create New Project</h2>\r\n          {success && <Message variant='success'>Project is Created</Message>}\r\n          {error && <Message variant='danger'>{error}</Message>}\r\n          {loading && <Loader />}\r\n          <Form >\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Your Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter project Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"description\">\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Description of the Project\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" onClick={createProjectHandler}>\r\n              Create\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default CreateProjectScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ProjectDetailScreen.js",["189","190"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col, Container } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listProjectById, updateProject } from '../actions/projectActions'\r\nimport { PROJECT_UPDATE_RESET } from '../constants/projectConstants'\r\nimport { hidden } from 'colors'\r\n\r\nconst ProjectDetailScreen = ({ history, match }) => {\r\n  const projectId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [description, setDescription] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const getProjectById = useSelector(state => state.getProjectById)\r\n  const { loading, project } = getProjectById\r\n\r\n  const projectUpdate = useSelector(state => state.projectUpdate)\r\n  const { error, success } = projectUpdate\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      dispatch({ type: PROJECT_UPDATE_RESET })\r\n      dispatch(listProjectById(projectId))\r\n      history.push(`/projects`)\r\n    } else {\r\n      if (!project || project._id !== projectId) {\r\n        dispatch(listProjectById(projectId))\r\n      } else {\r\n        setName(project.name)\r\n        setDescription(project.description)\r\n      }\r\n    }\r\n  }, [dispatch, success, projectId, history, project])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateProject(projectId, name, description))\r\n  }\r\n  return (\r\n    <main>\r\n      <Container className='py-3 px-0 ml-auto'>\r\n        <Row className='px-5 py-4'>\r\n          <Col md={6} >\r\n            {error && <Message variant='error'>{error}</Message>}\r\n            {success && <Message variant='success'>Update Successful</Message>}\r\n            {loading && <Loader />}\r\n            <h2>PROJECT UPDATE</h2>\r\n            <Form>\r\n              <Form.Group controlId=\"name\">\r\n                <Form.Label>Project Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your project name\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"description\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Description of project\"\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Button variant=\"primary\" type=\"submit\" onClick={submitHandler}>\r\n                Update\r\n              </Button>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default ProjectDetailScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\UsersScreen.js",["191"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Container, Row, Col, Table, Button } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listAllUser } from '../actions/userActions'\r\n\r\nconst UsersScreen = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const getAllUser = useSelector(state => state.getAllUser)\r\n  const { loading, error, users } = getAllUser\r\n\r\n  useEffect(() => {\r\n    dispatch(listAllUser())\r\n  }, [dispatch])\r\n  return (\r\n    <main>\r\n      <Container className='py-3 px-0 ml-auto'>\r\n        <Row>\r\n          <Col>\r\n            <h2>USERS </h2>\r\n\r\n            {loading ? (<Loader />) : error ? (<Message variant='danger'> {error} </Message>) : (\r\n              <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>NAME</th>\r\n                    <th>EMAIL</th>\r\n                    <th>ROLE</th>\r\n                    <th>TICKETS</th>\r\n                    <th>ADMIN</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {users.map((user, index) => (\r\n                    <tr key={index}>\r\n                      <td>{user._id}</td>\r\n                      <td>{user.name}</td>\r\n                      <td>{user.email}</td>\r\n                      <td>{user.role}</td>\r\n                      <td>\r\n                        <ul>\r\n                          {user.ticket.map(ticket => (\r\n                            <LinkContainer to={`/tickets/${ ticket.ticketId }`} >\r\n                              <li key={ticket._id}>{ticket.ticketName}</li>\r\n                            </LinkContainer>\r\n                          ))}\r\n                        </ul>\r\n                      </td>\r\n                      <td>{user.isAdmin && <i className=\"fas fa-check\"></i>}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default UsersScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\ManageUsersScreen.js",[],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\TicketDetailScreen.js",["192","193"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col, Container } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { updateTicket } from '../actions/ticketActions'\r\nimport { listTicketByID } from '../actions/ticketActions'\r\nimport { TICKET_UPDATE_RESET } from '../constants/ticketConstants'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\n\r\nconst TicketDetailScreen = ({ history, match }) => {\r\n  const dispatch = useDispatch()\r\n  const ticketId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const [priority, setPriority] = useState('')\r\n  const [status, setStatus] = useState('')\r\n  const [project, setProject] = useState({ name: '', projectId: '' })\r\n\r\n  const getAllProject = useSelector(state => state.getAllProject)\r\n  const { loading: loadingProject, error: errorProject, projects } = getAllProject\r\n\r\n  const ticketById = useSelector(state => state.ticketById)\r\n  const { loading, ticket } = ticketById\r\n\r\n  const ticketUpdate = useSelector(state => state.ticketUpdate)\r\n  const { error, success } = ticketUpdate\r\n\r\n  //Find the way to set initial asysnc\r\n  useEffect(() => {\r\n    if (success) {\r\n      dispatch({ type: TICKET_UPDATE_RESET })\r\n      dispatch(listTicketByID(ticketId))\r\n      history.push(`/tickets`)\r\n    } else {\r\n      if (!ticket || ticket._id !== ticketId) {\r\n        dispatch(listTicketByID(ticketId))\r\n      } else {\r\n        setName(ticket.name)\r\n        setDescription(ticket.description)\r\n        setPriority(ticket.priority)\r\n        setStatus(ticket.status)\r\n        setProject(ticket.project)\r\n      }\r\n    }\r\n  }, [dispatch, success, ticketId, history, ticket])\r\n\r\n  const updateTicketHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateTicket(ticketId, name, description, priority, status, project))\r\n  }\r\n  return (\r\n    <main>\r\n      <Container className='py-3 px-0 ml-auto'>\r\n        <Row className='px-5 py-4'>\r\n          <Col md={6} >\r\n            <h2>Ticket Detail </h2>\r\n            {success && <Message variant='success'>Project is Created</Message>}\r\n            {errorProject && <Message variant='danger'>{errorProject}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loadingProject || loading && <Loader />}\r\n            <Form >\r\n              <Form.Group controlId=\"name\">\r\n                <Form.Label>Ticket Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter project Name\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"description\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Description of the Project\"\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"priority\">\r\n                <Form.Label>Priority</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={priority}\r\n                  onChange={(e) => setPriority(e.target.value)}\r\n                >\r\n                  <option>Low</option>\r\n                  <option>Medium</option>\r\n                  <option>High</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"status\">\r\n                <Form.Label>Status</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={status}\r\n                  onChange={(e) => setStatus(e.target.value)}\r\n                >\r\n                  <option>Pending</option>\r\n                  <option>Reviewed</option>\r\n                  <option>Completed</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"project\">\r\n                <Form.Label>Project</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={project.name}\r\n                  onChange={(e) => setProject({\r\n                    name: projects[e.target.options.selectedIndex].name,\r\n                    projectId: projects[e.target.options.selectedIndex]._id\r\n                  })}\r\n                >\r\n                  {loadingProject ? <Loader /> : (projects.map((project, index) => (\r\n                    <option key={index}>{project.name}</option>\r\n                  ))\r\n                  )}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Button variant=\"primary\" type=\"submit\" onClick={updateTicketHandler}>\r\n                UPDATE\r\n            </Button>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default TicketDetailScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\components\\PieChart.js",[],["194","195"],"Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\UserDetailScreen.js",["196","197"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col, Container } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { updateUserProfileById, loadUserById } from '../actions/userActions'\r\nimport { USER_UPDATE_BYID_RESET } from '../constants/userConstants'\r\nimport { hidden } from 'colors'\r\n\r\nconst UserDetailScreen = ({ history, match }) => {\r\n  const dispatch = useDispatch()\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmedPassword, setConfirmedPassword] = useState('')\r\n  const [role, setRole] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const getUserById = useSelector(state => state.getUserById)\r\n  const { loading, user } = getUserById\r\n\r\n  const userUpdateProfileById = useSelector(state => state.userUpdateProfileById)\r\n  const { success } = userUpdateProfileById\r\n\r\n  useEffect(() => {\r\n    if (!user || user._id !== userId || success) {\r\n      dispatch({ type: USER_UPDATE_BYID_RESET })\r\n      dispatch(loadUserById(userId))\r\n    } else {\r\n      setName(user.name)\r\n      setEmail(user.email)\r\n      setRole((user.role))\r\n    }\r\n  }, [dispatch, user, userId])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    if (password !== confirmedPassword) {\r\n      setMessage('Password do not match')\r\n    } else {\r\n      dispatch(updateUserProfileById({ id: userId, name, email, password, role }))\r\n      setPassword('')\r\n      setConfirmedPassword('')\r\n    }\r\n  }\r\n  return (\r\n    <main>\r\n      <Container className='py-3 px-0 ml-auto'>\r\n        <Row>\r\n          <Col>\r\n            <h2>User Profile</h2>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {success && <Message variant='success'>Update Successful</Message>}\r\n            {loading && <Loader />}\r\n            <Form>\r\n              <Form.Group controlId=\"name\">\r\n                <Form.Label>Your Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"email\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"confirmedPassword\">\r\n                <Form.Label>Confirmed Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Confirmed Password\"\r\n                  value={confirmedPassword}\r\n                  onChange={(e) => setConfirmedPassword(e.target.value)}\r\n                />\r\n\r\n                <Form.Group controlId=\"role\">\r\n                  <Form.Label>Role</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    value={role}\r\n                    onChange={(e) => setRole(e.target.value)}\r\n                  >\r\n                    <option>Developer</option>\r\n                    <option>Tester</option>\r\n                    <option>Product Manager</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Form.Group>\r\n              <Button variant=\"primary\" type=\"submit\" onClick={submitHandler}>\r\n                Update\r\n             </Button>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default UserDetailScreen\r\n","Q:\\Users\\Quy\\Desktop\\github\\bug-tracking-system\\frontend\\src\\screens\\TicketAssignScreen.js",["198","199"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Form, Container, Row, Col, Table, Button } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listTicketByID, assignUserTicket, removeUserTicket } from '../actions/ticketActions'\r\n\r\nconst TicketAssignScreen = ({ history, match }) => {\r\n  const dispatch = useDispatch()\r\n  const ticketId = match.params.id\r\n\r\n  const [assignedTo, setAssignedTo] = useState({ name: '', email: '', role: '', userId: '' })\r\n\r\n  const getAllUser = useSelector(state => state.getAllUser)\r\n  const { loading: loadingUser, error: errorUser, users } = getAllUser\r\n\r\n  const ticketById = useSelector(state => state.ticketById)\r\n  const { loading, ticket } = ticketById\r\n\r\n  const ticketAssign = useSelector(state => state.ticketAssign)\r\n  const { error, success } = ticketAssign\r\n\r\n  const ticketRemoveUser = useSelector(state => state.ticketRemoveUser)\r\n  const { success: successRemove } = ticketRemoveUser\r\n\r\n  useEffect(() => {\r\n    dispatch(listTicketByID(ticketId))\r\n\r\n    if (success || successRemove) {\r\n      dispatch(listTicketByID(ticketId))\r\n    }\r\n  }, [dispatch, success, successRemove])\r\n\r\n  const deleteHandler = () => {\r\n    if (window.confirm('Are you sure?')) {\r\n      dispatch(removeUserTicket(ticketId, assignedTo.userId))\r\n    }\r\n  }\r\n  const assignHandler = () => {\r\n    if (window.confirm('Are you sure?')) {\r\n      dispatch(assignUserTicket(ticketId, assignedTo.name, assignedTo.email, assignedTo.role, assignedTo.userId))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <Container className='py-3 px-0 ml-auto'>\r\n        <Row>\r\n          <Col>\r\n            <h2>ASSIGN DEVELOPER TICKET</h2>\r\n            {loading ? (<Loader />) : error ? (<Message variant='danger'> {error} </Message>) : (\r\n              <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>NAME</th>\r\n                    <th>DESCRIPTION</th>\r\n                    <th>PRIORITY</th>\r\n                    <th>STATUS</th>\r\n                    <th>ASSIGNED</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {loading && <Loader />}\r\n                  <tr>\r\n                    <td>{ticket._id}</td>\r\n                    <td>{ticket.name}</td>\r\n                    <td>{ticket.description}</td>\r\n                    <td>{ticket.priority}</td>\r\n                    <td>{ticket.status}</td>\r\n                    <td>\r\n                      {ticket.assignedTo ? (\r\n                        <ul style={{ paddingLeft: '0' }}>\r\n                          <div >\r\n                            {ticket.assignedTo.map(user => (\r\n                              <li key={user.userId}>{user.name}</li>\r\n                            ))}\r\n                          </div>\r\n                        </ul>\r\n                      ) : ('Pending')}\r\n\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            )}\r\n            <Form.Group controlId=\"assignedTo\">\r\n              <Form.Label>Assigned To</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={assignedTo.name}\r\n                onChange={(e) => setAssignedTo({\r\n                  name: users[e.target.options.selectedIndex - 1].name,\r\n                  email: users[e.target.options.selectedIndex - 1].email,\r\n                  role: users[e.target.options.selectedIndex - 1].role,\r\n                  userId: users[e.target.options.selectedIndex - 1]._id,\r\n                })}\r\n              >\r\n                <option></option>\r\n                {loadingUser ? <Loader /> : (users.map((user, index) => {\r\n                  return (\r\n                    <option key={index}>{user.name}</option>\r\n                  )\r\n                })\r\n                )}\r\n              </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" onClick={assignHandler} className='mr-3'>\r\n              Assign\r\n            </Button>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" onClick={deleteHandler}>\r\n              Remove\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main >\r\n  )\r\n}\r\n\r\nexport default TicketAssignScreen\r\n\r\n",{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":35,"column":9,"nodeType":"206","messageId":"207","endLine":35,"endColumn":17},{"ruleId":"204","severity":1,"message":"208","line":1,"column":17,"nodeType":"206","messageId":"207","endLine":1,"endColumn":26},{"ruleId":"204","severity":1,"message":"209","line":3,"column":10,"nodeType":"206","messageId":"207","endLine":3,"endColumn":21},{"ruleId":"204","severity":1,"message":"210","line":4,"column":10,"nodeType":"206","messageId":"207","endLine":4,"endColumn":18},{"ruleId":"204","severity":1,"message":"211","line":8,"column":8,"nodeType":"206","messageId":"207","endLine":8,"endColumn":21},{"ruleId":"204","severity":1,"message":"212","line":17,"column":20,"nodeType":"206","messageId":"207","endLine":17,"endColumn":25},{"ruleId":"204","severity":1,"message":"213","line":20,"column":40,"nodeType":"206","messageId":"207","endLine":20,"endColumn":49},{"ruleId":"204","severity":1,"message":"214","line":23,"column":43,"nodeType":"206","messageId":"207","endLine":23,"endColumn":55},{"ruleId":"215","severity":1,"message":"216","line":31,"column":26,"nodeType":"217","messageId":"218","endLine":31,"endColumn":28},{"ruleId":"215","severity":1,"message":"216","line":62,"column":22,"nodeType":"217","messageId":"218","endLine":62,"endColumn":24},{"ruleId":"215","severity":1,"message":"216","line":70,"column":28,"nodeType":"217","messageId":"218","endLine":70,"endColumn":30},{"ruleId":"219","severity":1,"message":"220","line":114,"column":6,"nodeType":"221","endLine":114,"endColumn":8,"suggestions":"222"},{"ruleId":"204","severity":1,"message":"223","line":5,"column":10,"nodeType":"206","messageId":"207","endLine":5,"endColumn":17},{"ruleId":"204","severity":1,"message":"224","line":32,"column":7,"nodeType":"206","messageId":"207","endLine":32,"endColumn":26},{"ruleId":"204","severity":1,"message":"225","line":10,"column":10,"nodeType":"206","messageId":"207","endLine":10,"endColumn":16},{"ruleId":"204","severity":1,"message":"226","line":5,"column":10,"nodeType":"206","messageId":"207","endLine":5,"endColumn":24},{"ruleId":"204","severity":1,"message":"227","line":6,"column":10,"nodeType":"206","messageId":"207","endLine":6,"endColumn":21},{"ruleId":"228","severity":1,"message":"229","line":55,"column":44,"nodeType":"230","messageId":"231","endLine":55,"endColumn":46},{"ruleId":"228","severity":1,"message":"229","line":55,"column":55,"nodeType":"230","messageId":"231","endLine":55,"endColumn":57},{"ruleId":"204","severity":1,"message":"232","line":4,"column":25,"nodeType":"206","messageId":"207","endLine":4,"endColumn":29},{"ruleId":"204","severity":1,"message":"233","line":16,"column":36,"nodeType":"206","messageId":"207","endLine":16,"endColumn":43},{"ruleId":"204","severity":1,"message":"234","line":3,"column":10,"nodeType":"206","messageId":"207","endLine":3,"endColumn":23},{"ruleId":"204","severity":1,"message":"225","line":9,"column":10,"nodeType":"206","messageId":"207","endLine":9,"endColumn":16},{"ruleId":"204","severity":1,"message":"235","line":3,"column":38,"nodeType":"206","messageId":"207","endLine":3,"endColumn":44},{"ruleId":"228","severity":1,"message":"229","line":61,"column":29,"nodeType":"230","messageId":"231","endLine":61,"endColumn":31},{"ruleId":"228","severity":1,"message":"229","line":61,"column":40,"nodeType":"230","messageId":"231","endLine":61,"endColumn":42},{"ruleId":"200","replacedBy":"236"},{"ruleId":"202","replacedBy":"237"},{"ruleId":"204","severity":1,"message":"225","line":8,"column":10,"nodeType":"206","messageId":"207","endLine":8,"endColumn":16},{"ruleId":"219","severity":1,"message":"238","line":36,"column":6,"nodeType":"221","endLine":36,"endColumn":30,"suggestions":"239"},{"ruleId":"204","severity":1,"message":"213","line":15,"column":40,"nodeType":"206","messageId":"207","endLine":15,"endColumn":49},{"ruleId":"219","severity":1,"message":"240","line":32,"column":6,"nodeType":"221","endLine":32,"endColumn":40,"suggestions":"241"},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'loadUser' is defined but never used.","'FormContainer' is defined but never used.","'error' is assigned a value but never used.","'errorUser' is assigned a value but never used.","'errorProject' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chart', 'dispatch', 'projects', 'tickets', and 'users'. Either include them or remove the dependency array.","ArrayExpression",["244"],"'keyword' is assigned a value but never used.","'userInfoFromStorage' is assigned a value but never used.","'hidden' is defined but never used.","'listAllProject' is defined but never used.","'listAllUser' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'Link' is defined but never used.","'project' is assigned a value but never used.","'LinkContainer' is defined but never used.","'Button' is defined but never used.",["242"],["243"],"React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.",["245"],"React Hook useEffect has a missing dependency: 'ticketId'. Either include it or remove the dependency array.",["246"],"no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [chart, dispatch, projects, tickets, users]",{"range":"253","text":"254"},"Update the dependencies array to be: [dispatch, success, user, userId]",{"range":"255","text":"256"},"Update the dependencies array to be: [dispatch, success, successRemove, ticketId]",{"range":"257","text":"258"},[3162,3164],"[chart, dispatch, projects, tickets, users]",[1360,1384],"[dispatch, success, user, userId]",[1226,1260],"[dispatch, success, successRemove, ticketId]"]